#!/usr/bin/env nu

source scripts/kubernetes.nu
source scripts/crossplane.nu
source scripts/common.nu
source scripts/ingress.nu
source scripts/github.nu
source scripts/argocd.nu
source scripts/backstage.nu
source scripts/kubevela.nu
source scripts/atlas.nu
source scripts/external-secrets.nu
source scripts/cnpg.nu

def main [] {}

# Builds a container image
def "main build image" [
    tag: string                    # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic" # Image registry
    --image = "idp-full-app"       # Image name
    --push = true                  # Whether to push the image to the registry
] {

    docker image build --tag $"($registry)/($image):latest" .

    docker image tag $"($registry)/($image):latest" $"($registry)/($image):($tag)"

    if $push {

        docker image push $"($registry)/($image):latest"

        docker image push $"($registry)/($image):($tag)"

    }

}

# Executes tests
def "main run unit-tests" [] {

    print "Faking execution of unit-tests..."

}

# Executes tests
def "main update gitops" [
    tag: string                          # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic"       # Image registry
    --image = "idp-full-app"            # Image name
    --source_path = apps/silly-demo.yaml # Source path 
] {

    open $source_path |
        | upsert spec.parameters.image $"($registry)/($image):($tag)"
        | save $source_path --force

}

# Runs all CI tasks
def "main run ci" [
    tag: string                    # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic" # Image registry
    --image = "idp-full-app"      # Image name
] {

    main run unit-tests

    main build image $tag --registry $registry --image $image

    main update gitops $tag --registry $registry --image $image

}

# Sets up the complete demo
def "main setup all" [] {

    rm --force .env

    let provider = main get provider
    
    let ingress_data = setup common --provider $provider

    let github_data = main get github

    (
        main apply argocd
            --host_name $"argocd.($ingress_data.host)"
            --apply_apps false
            --ingress_class_name $ingress_data.class
    )

    open argocd/app.yaml
        | upsert spec.source.repoURL $"https://github.com/($github_data.user)/idp-full-app"
        | save argocd/app.yaml --force

    kubectl apply --filename argocd/app.yaml

    (
        main apply crossplane
            --provider $provider
            --db true --app true --github true --skip_login true
            --github_user $github_data.user
            --github_token $github_data.token
    )

    (
        docker login
            --username $github_data.user
            --password $github_data.token
            $"ghcr.io/($github_data.user)"
    )

    open crossplane/app.yaml
        | upsert spec.parameters.image $"ghcr.io/($github_data.user)/idp-full-app"
        | upsert spec.parameters.tag "FIXME"
        | upsert spec.parameters.host $"silly-demo.($ingress_data.host)"
        | upsert spec.parameters.ingressClassName "contour"
        | save crossplane/app.yaml --force

    upsert crossplane $provider $github_data.user

    (
        gh repo create $"($github_data.user)/idp-full-app"
            --public --add-readme
    )

    gh repo clone $"($github_data.user)/idp-full-app"

    main apply atlas

}

def "main destroy all" [
    hyperscaler: string
    github_user: string
] {

    do --ignore-errors {
        (
            kubectl --namespace a-team delete
                --filename idp-full-app/apps
        )
    }

    do --ignore-errors {
        (
            kubectl --namespace a-team delete
                --filename crossplane/repo.yaml
        )
    }

    cd idp-full-app

    rm --force apps/*.yaml

    touch apps/empty

    git add .

    git commit -m "Destroy [skip ci]"

    git pull

    git push

    cd ..

    main delete crossplane

    main destroy kubernetes $hyperscaler

    gh repo delete $"($github_user)/idp-full-app"
    
}

def "main setup ai" [] {

    rm --force .env

    let provider = main get provider --providers ["aws" "azure", "google", "upcloud"]
    
    let ingress_data = setup common --provider kind

    let github_data = main get github

    (
        main apply crossplane
            --provider $provider
            --db true --app true --github true --skip_login true
            --github_user $github_data.user
            --github_token $github_data.token
    )

    (
        docker login
            --username $github_data.user
            --password $github_data.token
            $"ghcr.io/($github_data.user)"
    )

    open crossplane/app.yaml
        | upsert spec.parameters.image $"ghcr.io/($github_data.user)/idp-full-app"
        | upsert spec.parameters.tag "FIXME"
        | upsert spec.parameters.host $"silly-demo.($ingress_data.host)"
        | upsert spec.parameters.ingressClassName "contour"
        | save crossplane/app.yaml --force

    upsert crossplane $provider $github_data.user

    main apply atlas

    mkdir tmp

    kubectl create namespace b-team

}

# Destroys the complete demo
def "main destroy ai" [] {

    main destroy kubernetes kind

    if PROJECT_ID in $env {
        gcloud projects delete $env.PROJECT_ID --quiet
    }

    rm tmp/*.yaml

}

def "main get resource types" [] {

    (
        kubectl api-resources
            --api-group devopstoolkit.live
            --namespaced --output name
    )
        | detect columns --no-headers
        | rename name
        | str replace --all --regex '.devopstoolkit.live' '' name

}

def "main get resources" [
    resource: string
    --namespace = "default"
] {

    kubectl --namespace $namespace get $resource

}

def "main describe resource" [
    resource: string
    name: string
    --namespace = "default"
] {
    
    kubectl --namespace $namespace describe $resource $name

    print ""
    print ""

    crossplane beta trace --namespace $namespace $resource $name

}

def "main apply dev" [
    user: string
    --db: string
] {

    mut manifest = "crossplane/app-dev.yaml"

    if $db != "" {

        $manifest = "crossplane/app-dev-db.yaml"

        open $manifest |
            upsert spec.parameters.db.secret $db |
            save $manifest --force

    }

    open $manifest |
        upsert spec.id $"($user)-silly-demo" |
        upsert spec.parameters.host $"($user).silly-demo.($env.INGRESS_HOST)" |
        save $manifest --force

    (
        kubectl --namespace ($user) apply --filename $manifest
    )

    sleep 2sec

    (
        kubectl --namespace $user wait --for=condition=available
            deployment silly-demo --timeout=300s
    )

    okteto context

    print $"
The application will be accessible through (ansi yellow_bold)http://($user).silly-demo.($env.INGRESS_HOST)(ansi reset).
"

    okteto up --namespace $user

}

def "upsert crossplane" [
    hyperscaler: string
    github_user: string
] {

    if $hyperscaler == "azure" {

        let date_suffix = (date now | format date "%Y%m%d%H%M%S")

        open crossplane/azure-sql.yaml |
            | upsert spec.id $"silly-demo-db-($date_suffix)"
            | save crossplane/azure-sql.yaml --force

        open crossplane/azure-sql-password.yaml |
            | upsert metadata.name $"silly-demo-db-($date_suffix)-password"
            | save crossplane/azure-sql-password.yaml --force

        open crossplane/app.yaml |
            | upsert spec.parameters.db.secret $"silly-demo-db-($date_suffix)"
            | save crossplane/app.yaml --force

    } else {

        open crossplane/app.yaml |
            | upsert spec.parameters.db.secret "silly-demo-db"
            | save crossplane/app.yaml --force

    }

    open crossplane/app.yaml
        | upsert spec.parameters.image $"ghcr.io/($github_user)/idp-full-app"
        | upsert spec.parameters.tag "FIXME"
        | save crossplane/app.yaml --force

}

def --env "setup common" [
    --provider = "kind"
] {

    mut ingress_class = "nginx"

    if $provider != "kind" {
        $ingress_class = "contour"
    }

    rm --force --recursive kubeconfig*.yaml

    rm --force --recursive idp-full-app

    main create kubernetes $provider

    let ingress_data = (
        main apply ingress $ingress_class --provider $provider
    )

    kubectl create namespace a-team

    {
        ip: $ingress_data.ip,
        host: $"($ingress_data.ip).nip.io",
        class: $ingress_data.class
    }

}
