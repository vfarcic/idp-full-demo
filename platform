#!/usr/bin/env nu

source scripts/kubernetes.nu
source scripts/crossplane.nu
source scripts/get-hyperscaler.nu
source scripts/ingress.nu
source scripts/github.nu
source scripts/kyverno.nu
source scripts/argocd.nu
source scripts/port.nu

def main [] {}

# Builds a container image
def "main build image" [
    tag: string                    # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic" # Image registry
    --image = "idp-full-app"       # Image name
    --push = true                  # Whether to push the image to the registry
] {

    docker image build --tag $"($registry)/($image):latest" .

    docker image tag $"($registry)/($image):latest" $"($registry)/($image):($tag)"

    if $push {

        docker image push $"($registry)/($image):latest"

        docker image push $"($registry)/($image):($tag)"

    }

}

# Executes tests
def "main run unit-tests" [] {

    print "Faking execution of unit-tests..."

}

# Executes tests
def "main update gitops" [
    tag: string                          # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic"       # Image registry
    --image = "idp-full-app"            # Image name
    --source_path = apps/silly-demo.yaml # Source path 
] {

    open $source_path |
        | upsert spec.parameters.image $"($registry)/($image):($tag)"
        | save $source_path --force

}

# Runs all CI tasks
def "main run ci" [
    tag: string                    # The tag of the image (e.g., 0.0.1)
    --registry = "ghcr.io/vfarcic" # Image registry
    --image = "idp-full-app"      # Image name
] {

    main run unit-tests

    main build image $tag --registry $registry --image $image

    main update gitops $tag --registry $registry --image $image

}

# Sets up the complete demo
def "main setup all" [] {
    
    rm --force .env

    let hyperscaler = main get hyperscaler

    let github_data = main get github

    main create kubernetes kind

    main apply ingress kind nginx

    main apply port $github_data.user "idp-full-app"

    kubectl create namespace a-team

    main apply kyverno

    main apply argocd "argocd.127.0.0.1.nip.io" false "nginx"

    (
        main apply crossplane
            --hyperscaler $hyperscaler
            --db true --app true --github true
            --github_user $github_data.user
            --github_token $github_data.token
    )

    (
        docker login
            --username $github_data.user
            --password $github_data.token
            $"ghcr.io/($github_data.user)"
    )

    # (
    #     cp ../.github/workflows/sync-control-plane-direct.yml
    #         .github/workflows/sync-control-plane-direct.yml
    # )

    open .crossplane/app.yaml
        | upsert spec.parameters.image $"ghcr.io/($github_data.user)/idp-full-app"
        | upsert spec.parameters.tag "FIXME"
        | save crossplane/app.yaml --force

    # open argocd-apps.yaml
    #     | upsert spec.source.repoURL $"https://github.com/($github_data.user)/idp-full-app"
    #     | save argocd-apps.yaml --force

    # git add .

    # git commit -m "Initial commit"

    # git push --set-upstream origin main

    # cd ..

    # rm -rf idp-full-app

}

# Sets up the apps demo
def "main setup apps" [] {
    
    rm --force .env

    let hyperscaler = main get hyperscaler

    let github_data = main get github

    main create kubernetes kind

    main apply ingress kind nginx

    kubectl create namespace a-team

    (
        main apply crossplane
            --hyperscaler $hyperscaler
            --db true --app true --github true
            --github_user $github_data.user
            --github_token $github_data.token
    )

    if $hyperscaler == "azure" {

        let date_suffix = (date now | format date "%Y%m%d%H%M%S")

        open crossplane/azure-sql.yaml |
            | upsert spec.id $"silly-demo-db-($date_suffix)"
            | save crossplane/azure-sql.yaml --force

        open crossplane/azure-sql-password.yaml |
            | upsert metadata.name $"silly-demo-db-($date_suffix)-password"
            | save crossplane/azure-sql-password.yaml --force

        open crossplane/app.yaml |
            | upsert spec.parameters.db.secret $"silly-demo-db-($date_suffix)"
            | save crossplane/app.yaml --force

    } else {

        open crossplane/app.yaml |
            | upsert spec.parameters.db.secret "silly-demo-db"
            | save crossplane/app.yaml --force

    }

    open .crossplane/app.yaml
        | upsert spec.parameters.image $"ghcr.io/($github_data.user)/idp-full-app"
        | upsert spec.parameters.tag "FIXME"
        | save crossplane/app.yaml --force

}

# Sets up the CLIs demo
def "main setup clis" [] {
    
    rm --force .env

    main create kubernetes kind

    main apply ingress kind nginx

    main apply crossplane --app true

    kubectl create namespace a-team
    
    kubectl --namespace a-team apply --filename crossplane/app-solo.yaml

}

# Destroys the complete demo
def "main destroy all" [] {

    rm --force apps/*.yaml

    main delete crossplane $env.HYPERSCALER

    main destroy kubernetes kind

    main delete port

    rm --force --recursive idp-full-app

    gh repo delete $"($env.GITHUB_USER)/idp-full-app"
    
}

# Destroys up the apps demo
def "main destroy apps" [] {

    kubectl --namespace a-team delete --filename crossplane/repo.yaml

    kubectl --namespace a-team delete --filename idp-full-app/apps

    main delete crossplane $env.HYPERSCALER

    if $env.HYPERSCALER == "google" {

        gcloud projects delete $env.PROJECT_ID --quiet

    }

    main destroy kubernetes kind

    rm --force --recursive idp-full-app

    gh repo delete $"($env.GITHUB_USER)/idp-full-app"

}

# Destroys the CLIs demo
def "main destroy clis" [] {

    gh repo delete $"($env.GITHUB_USER))/idp-full-app"

    main destroy kubernetes kind
    
}

def "main get resource types" [] {

    (
        kubectl api-resources
            --api-group devopstoolkitseries.com
            --namespaced --output name
    )
        | detect columns --no-headers
        | rename name
        | str replace --all --regex '.devopstoolkitseries.com' '' name

}

def "main get resources" [
    resource: string
    --namespace = "default"
] {

    kubectl --namespace $namespace get $resource

}

def "main describe resource" [
    resource: string
    name: string
    --namespace = "default"
] {
    
    kubectl --namespace $namespace describe $resource $name

    print ""
    print ""

    crossplane beta trace --namespace $namespace $resource $name

}

